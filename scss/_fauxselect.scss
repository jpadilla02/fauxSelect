@import "config";

/*************************************

    Table of Contents

	=Utility
	=Config
	=FauxSelect

*************************************/

/**        =Utility         **/
%abscover{
	position: absolute;
	left: 0;
	top: 0;
	height: 100%;
	width: 100%;
}
@mixin prefix($property, $value){
    @each $prefix in -webkit-, -ms-, -o-, -moz-, '' {
        #{$prefix}#{$property}: $value;
    }
}
@mixin transformer($arguments){
	@include prefix(transform, $arguments);
}
@mixin ease($properties: all, $durations: 0.35s, $easings: ease-in-out){
	$final: ();

	@if length($properties) > 1{
		@each $property in $properties{
			$index: index($properties, $property);
			@if length($durations) == length($properties) and length($easings) == length($properties){
				$final: append($final, $property nth($durations, $index) nth($easings, $index), comma);
			}
			@else if length($durations) == length($properties) and length($easings) == 1{
				$final: append($final, $property nth($durations, $index) nth($easings, 1), comma)
			}
			@else if length($easings) == length($properties) and length($durations) == 1{
				$final: append($final, $property nth($durations, 1) nth($easings, $index), comma);
			}
			@else if length($easings) == 1 and length($durations) == 1{
				$final: append($final, $property nth($durations, 1) nth($easings, 1), comma);
			}
		}
	}
	@else{
		$final: nth($properties, 1) nth($durations, 1) nth($easings, 1);
	}
	@include prefix(transition, $final);
}
@mixin faux_text($font:null, $font-size:null, $color:null, $text-transform:null, $background-color:null){
    @if $font != null{
		@extend %#{$font};
	}
    font-size: $font-size;
    color: $color;
	text-transform: $text-transform;
	background-color: $background-color;
}

/**        =FauxSelect         **/
$faux-font-keys: map_keys($fauxFonts);
@each $font-key in $faux-font-keys{
	#{$font-key}{
		@include faux_text((
			map-get($fauxFonts, $font-key)
		)...);
	}
}

$fauxHeight: map-get($fauxConfig, paddingY) * 2 + map-get($fauxConfig, opLineHeight);
.fauxEl{
	position: relative;
	height: $fauxHeight;
	cursor: pointer;
	z-index: 5;
	@include ease(z-index margin-bottom);
	select{
		display: none;
	}
	.fauxDropper, .fauxHead{
		@extend %abscover;
	}
	.fauxDropper{
		background: transparent;
	}
	.fauxHead{
		line-height: $fauxHeight;
		padding: 0 #{map-get($fauxConfig, paddingX)};
		width: calc(100% - #{map-get($fauxConfig, paddingX) * 2});
	}
	.fauxHolder{
		height: $fauxHeight;
		overflow: visible;
		position: relative;
		@include ease(height);
		.fauxSelect{
			height: $fauxHeight;
			position: relative;
			margin: 0;
			padding: 0;
			.fauxOption{
				position: absolute;
				top: 0;
				text-overflow: ellipsis;
				overflow: hidden;
				white-space: nowrap;
				line-height: map-get($fauxConfig, opLineHeight);
				font-size: map-get($fauxConfig, opFontSize);
				padding: #{map-get($fauxConfig, paddingY)} #{map-get($fauxConfig, paddingX)};
				width: calc(100% - #{map-get($fauxConfig, paddingX) * 2});
				@include ease(top);
			}
		}
	}

	// z-indexes
	.fauxDropper{
		z-index: 4;
	}
	.fauxArrow{
		z-index: 3;
	}
	.fauxHead{
		z-index: 2;
	}
	.fauxHolder{
		z-index: 1;
	}

	&.selected{

		// z-indexes
		.fauxDropper{
			z-index: 4;
		}
		.fauxArrow{
			z-index: 3;
		}
		.fauxHead{
			z-index: 1;
		}
		.fauxHolder{
			z-index: 2;
		}
	}

	&.open{
		z-index: 10;
		.fauxHolder{
			.fauxSelect{
				.fauxOption{
					text-overflow: inherit;
					overflow: visible;
					white-space: normal;
				}
			}
		}

		// z-indexes
		.fauxDropper{
			z-index: 0;
		}
		.fauxArrow{
			z-index: 3;
		}
		.fauxHead{
			z-index: 2;
		}
		.fauxHolder{
			z-index: 1;
		}
	}
}

.fauxEl .fauxArrow{
	position: absolute;
	height: 100%;
	right: 0;
	background-color: map-get($fauxArrow, background-color);
	background-image: map-get($fauxArrow, background-image);
	@if map-get($fauxArrow, width) == null{
		width: $fauxHeight;
	}
	@else{
		width: map-get($fauxArrow, width);
	}
}
